#include <iostream>
#include <iomanip>
#include <string>
#include "logicGate.h"
#include "Arithmetic.h"
#include "Switching.h"
#include "ArithmeticLogicUnit.h"
#include "Memory.h"
#include "Processor.h"

using namespace std;

bool Instruction[32][16] =
{
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1},
    {1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1},
    {1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0},
    {1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
    {1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
    {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};

int clockCycle = 100;

int main()
{
    Computer unit;
    Bits16 bits;
    string s;

// =========================================================================================================================
// ============================================= Write Instructions into ROM. ==============================================

    cout << "========================================= 輸入說明 =========================================" << endl << endl;
    cout << "以下是 Instruction 的輸入說明，每個 Instruction 共 16 Bits，由 0 和 1 組成。" << endl << endl;

    cout << "+===|===|===|===|===|===|===|===|===|===|===|===|===|===|===|===+" << endl;
    cout << "| ci|---|---| * |---| u |op1|op0| zx| sw| a | d |*a | lt| eq| gt|" << endl;
    cout << "+===|===|===|===|===|===|===|===|===|===|===|===|===|===|===|===+" << endl << endl;;

    cout << "ci : 1 代表做算術或邏輯。  0 代表直接賦值給 Register0(A)，後面可輸入 15 位的二進制數字。" << endl;
    cout << " * : 1 代表做算術或邏輯時使用的是 Register0 指向的記憶體(*A) 而非 Register0(A)。" << endl;
    cout << " u : 1 代表做邏輯，0 代表做算術，更詳細的定義請看下一行。" << endl;
    cout << "(u, op1, op0) : (0, 0, 0)=X and Y  (0, 0, 1)=X or Y  (0, 1, 0)=X xor Y  (0, 1, 1)=X invert Y" << endl;
    cout << "              : (1, 0, 0)=X  +  Y  (1, 0, 1)=X +  1  (1, 1, 0)=X  -  Y  (1, 1, 1)=X  -  1" << endl;
    cout << "zx : 1 代表將 X 當作 0。" << endl;
    cout << "sw : 1 代表交換 X 和 Y。  注意 : 若 zx 和 sw 同時為 1 ，順序是先 sw 再 zx。" << endl;
    cout << " a : 1 代表算術或邏輯結果要給 Register0(A)。" << endl;
    cout << " d : 1 代表算術或邏輯結果要給 Register1(D)。" << endl;
    cout << "*a : 1 代表算術或邏輯結果要給 Register0 指向的記憶體(*A)。" << endl;
    cout << "lt : 1 代表算術或邏輯結果 LowerThan 0 時將 counter Jump 到 Register0 指向的 Instruction。" << endl;
    cout << "eq : 1 代表算術或邏輯結果 Equal 0 時將 counter Jump 到 Register0 指向的 Instruction。" << endl;
    cout << "gt : 1 代表算術或邏輯結果 GreaterThan 0 時將 counter Jump 到 Register0 指向的 Instruction。" << endl << endl;

    cout << "更詳細的說明或範例可以看 程式說明 word 檔。" << endl << endl;
    cout << "========================================= 輸入說明 =========================================" << endl << endl;

    cout << "=========================================== 輸入 ===========================================" << endl << endl;
    cout << "單個 Instruction 的輸入格式範例 : 0000000000000011 ( 代表 Register0(A) = 3 )。" << endl;
    cout << "請輸入欲執行的 32 個 Instruction : " << endl << endl;

    for (int i=0; i<32;)
    {
        cout << "Line " << setw(2) << i+1 << " :";
        getline(cin, s);
        if (s.size() != 16)
        {
            cout << "輸入錯誤！ 請重新輸入。" << endl;
            continue;
        }
        for (int j=0; j<16; j++)
            if (s[j] - '0' != 0 && s[j] - '0' != 1)
            {
                cout << "輸入錯誤！ 請重新輸入。" << endl;
                break;
            }
            else
                Instruction[i][j] = s[j] - '0';
        i++;
    }
    cout << endl;

    cout << "請輸入欲執行 Instruction 次數: ";
    cin >> clockCycle;
    cout << endl;

    cout << "以下是輸入的 Instruction : " << endl << endl;
    cout << "+===|===|===|===|===|===|===|===|===|===|===|===|===|===|===|===+" << endl;
    cout << "| ci| - | - | * | - | u |op1|op0| zx| sw| a | d |*a | lt| eq| gt|" << endl;
    cout << "+===|===|===|===|===|===|===|===|===|===|===|===|===|===|===|===+" << endl;
    for (int i=0; i<32; i++)
    {
        cout << "|";
        for (int j=0; j<16; j++)
            cout << " " << Instruction[i][j] << " |";
        cout << endl;
    }
    cout << "+===|===|===|===|===|===|===|===|===|===|===|===|===|===|===|===+" << endl << endl;

    cout << "欲執行 Instruction 次數: " << clockCycle << "次" << endl << endl;
    cout << "=========================================== 輸入 ===========================================" << endl << endl;

    for (int i=0; i<32; i++)
    {
        for (int j=15; j>=0; j--)
            bits[15-j] = (Instruction[i][j]) ? t : f;
        ((unit.rom)->reg[i])->setValue(bits);
        ((unit.rom)->reg[i])->setStore(true);
        ((unit.rom)->reg[i])->setclk(true);
        ((unit.rom)->reg[i])->setStore(false);
        ((unit.rom)->reg[i])->setclk(false);
    }
// ============================================= Write Instructions into ROM. ==============================================
// =========================================================================================================================

// =========================================================================================================================
// ======================================================= Execute =========================================================

    // Execute
    for (int i=0; i<clockCycle; i++)
    {
        if (i%10 == 0)
            cout << setw(2) << i << " Instruction Executed ..." << endl;
        unit.clock();
    }

// ======================================================= Execute =========================================================
// =========================================================================================================================

// =========================================================================================================================
// ======================================================== Result =========================================================

    // Print the result from memory and register
    cout << endl << "========================================= 輸出結果 =========================================" << endl << endl;
    cout << "Memory : " << endl;
    for (int i=0; i<32; i++)
    {
        int num = 0;
        cout << setfill('0') << "Memory[" << setw(2) << i << "]:";
        bits = (((unit.memory)->ram)->reg[i])->output();
        for (int j=15; j>=0; j--)
            cout << bits[j]->output();
        cout << endl;
    }

    cout << endl << "Register : " << endl;
    for (int i=0; i<2; i++)
    {
        cout << "Register[" << i << "]:";
        bits = ((unit.memory)->reg[i])->output();
        for (int j=15; j>=0; j--)
            cout << bits[j]->output();
        cout << endl;
    }
    cout << endl;
    cout << "========================================= 輸出結果 =========================================" << endl;

// ======================================================== Result =========================================================
// =========================================================================================================================

    system("pause");
    return 0;
}


/*
// Example 1
bool Instruction[32][16] =
{
    {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1},
    {1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0},
    {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
    {0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1},
    {1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1},
    {1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1},
    {1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};
int clockCycle = 11;

// Example 2
bool Instruction[32][16] =
{
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1},
    {1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
    {1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
    {1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
    {1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1},
    {1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1},
    {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
    {1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0},
    {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};
int clockCycle = 300;

// Example 3
bool Instruction[32][16] =
{
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1},
    {1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1},
    {1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0},
    {1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
    {1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
    {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};
int clockCycle = 215;
*/
